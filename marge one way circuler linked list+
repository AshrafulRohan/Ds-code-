#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* mergeCircularLists(struct Node* head1, struct Node* head2) {
    if (head1 == NULL) return head2;
    if (head2 == NULL) return head1;

    struct Node* tail1 = head1;
    while (tail1->next != head1) {
        tail1 = tail1->next;
    }

    struct Node* tail2 = head2;
    while (tail2->next != head2) {
        tail2 = tail2->next;
    }

    tail1->next = head2;
    tail2->next = head1;

    return head1;
}

struct Node* createCircularList() {
    struct Node *head = NULL, *temp = NULL, *current = NULL;
    int n, value;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter value for node %d: ", i + 1);
        scanf("%d", &value);

        temp = (struct Node*)malloc(sizeof(struct Node));
        temp->data = value;
        temp->next = NULL;

        if (head == NULL) {
            head = temp;
            current = temp;
            head->next = head;
        } else {
            current->next = temp;
            current = temp;
            current->next = head;
        }
    }
    return head;
}

void printCircularList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* ptr = head;
    printf("Circular List: ");
    do {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
    printf("\n");
}

void freeCircularList(struct Node* head) {
    if (head == NULL) return;

    struct Node* current = head->next;
    struct Node* nextNode;

    while (current != head) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    free(head);
}

int main() {
    printf("Creating first circular list:\n");
    struct Node* head1 = createCircularList();
    printf("First list: ");
    printCircularList(head1);

    printf("\nCreating second circular list:\n");
    struct Node* head2 = createCircularList();
    printf("Second list: ");
    printCircularList(head2);

    struct Node* mergedHead = mergeCircularLists(head1, head2);
    printf("\nMerged list: ");
    printCircularList(mergedHead);

    freeCircularList(mergedHead);
    return 0;
}

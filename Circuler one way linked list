#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* insertNode(struct Node* head, int value, int position) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        newNode->next = newNode;
        return newNode;
    }

    if (position == 1) {
        struct Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        newNode->next = head;
        last->next = newNode;
        return newNode;
    }

    struct Node* current = head;
    for (int i = 1; i < position - 1 && current->next != head; i++) {
        current = current->next;
    }

    newNode->next = current->next;
    current->next = newNode;
    return head;
}

struct Node* createCircularList() {
    struct Node *head = NULL, *temp = NULL, *current = NULL;
    int n, value;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter value for node %d: ", i + 1);
        scanf("%d", &value);

        temp = (struct Node*)malloc(sizeof(struct Node));
        temp->data = value;
        temp->next = NULL;

        if (head == NULL) {
            head = temp;
            current = temp;
            head->next = head;
        } else {
            current->next = temp;
            current = temp;
            current->next = head;
        }
    }
    return head;
}

void printCircularList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* ptr = head;
    printf("Circular List: ");
    do {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
    printf("\n");
}

void freeCircularList(struct Node* head) {
    if (head == NULL) return;

    struct Node* current = head->next;
    struct Node* nextNode;

    while (current != head) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    free(head);
}

int main() {
    struct Node* head = createCircularList();
    printf("Original list: ");
    printCircularList(head);

    int value, position;
    printf("\nEnter value to insert: ");
    scanf("%d", &value);
    printf("Enter position to insert: ");
    scanf("%d", &position);

    head = insertNode(head, value, position);
    printf("List after insertion: ");
    printCircularList(head);

    freeCircularList(head);
    return 0;
}

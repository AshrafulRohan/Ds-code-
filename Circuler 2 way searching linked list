#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createCircularDoublyList() {
    struct Node *head = NULL, *temp = NULL, *current = NULL;
    int n, value;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter value for node %d: ", i + 1);
        scanf("%d", &value);

        temp = (struct Node*)malloc(sizeof(struct Node));
        temp->data = value;
        temp->prev = NULL;
        temp->next = NULL;

        if (head == NULL) {
            head = temp;
            current = temp;
            head->next = head;
            head->prev = head;
        } else {
            current->next = temp;
            temp->prev = current;
            temp->next = head;
            head->prev = temp;
            current = temp;
        }
    }
    return head;
}

int searchCircularDoublyList(struct Node* head, int value) {
    if (head == NULL) return 0;

    struct Node* current = head;
    
    do {
        if (current->data == value) {
            return 1;
        }
        current = current->next;
    } while (current != head);

    return 0;
}

void printCircularDoublyListForward(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* ptr = head;
    printf("Forward: ");
    do {
        printf("%d -> ", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
    printf("(head)\n");
}

void printCircularDoublyListBackward(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* ptr = head->prev;
    printf("Backward: ");
    do {
        printf("%d -> ", ptr->data);
        ptr = ptr->prev;
    } while (ptr != head->prev);
    printf("(tail)\n");
}

void freeCircularDoublyList(struct Node* head) {
    if (head == NULL) return;

    struct Node* current = head->next;
    struct Node* nextNode;

    while (current != head) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    free(head);
}

int main() {
    struct Node* head = createCircularDoublyList();
    
    printCircularDoublyListForward(head);
    printCircularDoublyListBackward(head);

    int searchValue;
    printf("Enter value to search: ");
    scanf("%d", &searchValue);

    if (searchCircularDoublyList(head, searchValue)) {
        printf("%d found in the list.\n", searchValue);
    } else {
        printf("%d not found in the list.\n", searchValue);
    }

    freeCircularDoublyList(head);
    return 0;
}
